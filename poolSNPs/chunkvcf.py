import sys, os
from typing import *
import numpy as np
from cyvcf2 import VCF
import pysam
from itertools import starmap, repeat
import shutil
import multiprocessing as mp
import argparse

home_dir = os.path.expanduser("~")
proj_dir = os.path.join(home_dir, '1000Genomes')
sys.path.insert(0, proj_dir)

from scripts.VCFPooling.poolSNPs import parameters as prm
from scripts.VCFPooling.poolSNPs import beagle_tools as bgltls
from scripts.VCFPooling.poolSNPs import pybcf
from scripts.VCFPooling.poolSNPs.alleles import alleles_tools as alltls

from persotools.files import delete_file, mkdir, FilePath
from persotools.struct import NamedDict

'''
Parallelized file processing: Read main vcf and write chunks

Steps:
* 
*
*
'''


class VariantCallGenerator(object):
    """
    Generates single-type formatted calls of variants
    """

    def __init__(self, vcfpath: FilePath, format: str = None):
        """
        :param vcfpath:
        :param indextype: identifier for variants: 'id', 'chrom:pos'.
        Must be 'chrom:pos' if the input has been generated by Phaser
        """
        self.path = vcfpath
        self.fmt = format

    def __iter__(self):
        vcfobj = pysam.VariantFile(self.path)
        for var in vcfobj:
            yield [g[self.fmt] for g in var.samples.values()]


class VariantChunkGenerator(object):
    """
    Generates chunks of single-type formatted calls of variants
    """

    def __init__(self, vcfpath: FilePath, format: str = None, chunksize: int = None):
        """
        :param vcfpath:
        :param indextype: identifier for variants: 'id', 'chrom:pos'.
        Must be 'chrom:pos' if the input has been generated by Phaser
        """
        self.path = vcfpath
        self.fmt = format
        self.chksz = chunksize
        self.chrom = [*pysam.VariantFile(self.path).header.contigs][0]
        # extract chrom, works if only 1 chrom in the file
        self.pack = True
        self.newpos = 1  # for valid self.newpos - 1 at the start of the first chunk

    def chunk(self, chunksize: int, newpos: int):
        """Build generators of variants calls"""
        iterator = pysam.VariantFile(self.path)
        try:
            for i, v in enumerate(iterator.fetch(contig=self.chrom, start=newpos - 1, reopen=False)):
                # newpos - 1: avoids first variant truncation in the next chunk
                var = v
                if i == chunksize:
                    break
                yield var

        except StopIteration:
            print('Could not build chunk')

    def incrementer(self, chunksize: int):
        """update position and packing bool"""
        iterator = pysam.VariantFile(self.path)
        try:
            for i, v in enumerate(iterator.fetch(contig=self.chrom, start=self.newpos - 1, reopen=False)):
                # self.newpos - 1: avoids first variant truncation in the next chunk
                var = v
                if i == chunksize:
                    self.newpos = var.pos
                    break
            if var.pos != self.newpos:  # reached EOF
                self.pack = False

        except StopIteration:
            self.newpos = None
            self.pack = False

        finally:
            return self.newpos, self.pack

    def chunkpacker(self):
        while self.pack:
            chk = self.chunk(self.chksz, self.newpos)
            # function output and included sttributes updates NOT unpacked hence NOT updated
            self.newpos, self.pack = self.incrementer(self.chksz)
            yield chk
            print(self.newpos, self.pack)


class ChunkHandler(object):
    """
    what I will be able to do with chunks of variants:
    * track header of the main file, update header if necessary
    * process e.g. simualte pooling
    * write back to vcf
    """
    def __init__(self, mainpath: FilePath, packedchunk):
        self.mainf = pysam.VariantFile(mainpath)
        self.data = packedchunk

    @property
    def header(self):
        return self.mainf.header

    def process(self):
        # any way to update a record?
        for rec in self.data:
            var = rec
            for v in var.samples.values():
                v['GT'] = (None, None)
            yield var

    def writevcf(self, pathout: FilePath, data):
        """
        :param data: variant generator
        """
        fout = pysam.VariantFile(pathout, 'w', header=self.header)
        data = self.process()
        for rec in data:
            var = rec
            print([v['GT'] for v in var.samples.values()])
            fout.write(rec)
        fout.close()


if __name__ == '__main__':
    os.chdir('/home/camille/1000Genomes/data/gl/gl_adaptive/all_snps_all_samples')
    mainpth = 'IMP.chr20.pooled.beagle2.gl.chunk10000.corr.vcf.gz'

    gtframe = alltls.PandasMixedVCF('IMP.chr20.pooled.beagle2.gl.chunk10000.corr.vcf.gz', format='GP')
    varonly = alltls.VariantCallGenerator('IMP.chr20.pooled.beagle2.gl.chunk10000.corr.vcf.gz', format='GP')
    varchunk = alltls.VariantChunkGenerator('IMP.chr20.pooled.beagle2.gl.chunk10000.corr.vcf.gz',
                                            format='GP',
                                            chunksize=1000)

    chunkpack = varchunk.chunkpacker()
    for i, chk in enumerate(chunkpack):
        # print(i, len([*chk]))  # empties chk!
        print('\r\n', i)
        chki = ChunkHandler(mainpth, chk)
        chki.writevcf('chktest{}.vcf'.format(i), chki.data)
        break
